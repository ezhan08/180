1. reverse a ll

class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* curr= head;
        ListNode* prev= NULL;
        while(curr!=NULL){
            ListNode* next= curr->next;
            curr->next = prev;
            prev= curr;
            curr= next;
        }
        return prev;
    }
};

2. middle of ll

class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode* fast= head;
        ListNode *slow = head;
        while(fast!=NULL && fast->next != NULL){
            fast = fast->next->next;
            slow= slow->next;
        }
        return slow;
    }
};

3. merge two sorted ll

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode* result;
        if(list1 == NULL) return list2;
        if(list2==NULL) return list1;
        if(list1->val < list2->val){
            result = list1;
            list1->next = mergeTwoLists(list1->next, list2);
        }else{
            result = list2;
            list2->next = mergeTwoLists(list2->next, list1);
        }
        return result;
    }
};

4. Remove nth node from back of ll

class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode * start = new ListNode();
        start->next = head;
        ListNode* first = start, *second = start;
        for(int i=1;i<=n;i++){
            first = first->next;
        }
        while(first->next != NULL){
            second = second->next;
            first = first->next;
        }
        second->next = second->next->next;
        return start->next;
    }
};
