1. reverse a ll

class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* curr= head;
        ListNode* prev= NULL;
        while(curr!=NULL){
            ListNode* next= curr->next;
            curr->next = prev;
            prev= curr;
            curr= next;
        }
        return prev;
    }
};

2. middle of ll

class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode* fast= head;
        ListNode *slow = head;
        while(fast!=NULL && fast->next != NULL){
            fast = fast->next->next;
            slow= slow->next;
        }
        return slow;
    }
};

3. merge two sorted ll

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode* result;
        if(list1 == NULL) return list2;
        if(list2==NULL) return list1;
        if(list1->val < list2->val){
            result = list1;
            list1->next = mergeTwoLists(list1->next, list2);
        }else{
            result = list2;
            list2->next = mergeTwoLists(list2->next, list1);
        }
        return result;
    }
};

4. Remove nth node from back of ll

class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode * start = new ListNode();
        start->next = head;
        ListNode* first = start, *second = start;
        for(int i=1;i<=n;i++){
            first = first->next;
        }
        while(first->next != NULL){
            second = second->next;
            first = first->next;
        }
        second->next = second->next->next;
        return start->next;
    }
};


5. add numbers of ll


Leetcode:


class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *dummy = new ListNode(); 
        ListNode *temp = dummy; 
        int carry = 0;
        while( (l1 != NULL || l2 != NULL) || carry) {
            int sum = 0; 
            if(l1 != NULL) {
                sum += l1->val; 
                l1 = l1 -> next; 
            }
            
            if(l2 != NULL) {
                sum += l2 -> val; 
                l2 = l2 -> next; 
            }
            
            sum += carry; 
            carry = sum / 10; 
            ListNode *node = new ListNode(sum % 10); 
            temp -> next = node; 
            temp = temp -> next; 
        }
        return dummy -> next; 
    }
};

GFG:

class Solution
{
    public:
    //Function to add two numbers represented by linked list.
    Node* reverse(Node* head){
        Node* curr = head;
        Node* prev = NULL;
        Node* next = NULL;
        while(curr!=NULL){
            next = curr->next;
            curr->next = prev;
            prev=curr;
            curr= next;
        }
        return prev;
    }
    
    
    struct Node* addTwoLists(struct Node* first, struct Node* second)
    {
        // code here
        first = reverse(first);
        second = reverse(second);
        Node* dummy = new Node(0);
        Node* temp = dummy;
        
        int carry =0;
        while(first != NULL || second != NULL || carry){
            int sum=0;
            if(first!=NULL){
                sum += first->data;
                first = first->next;
            }
            if(second!=NULL){
                sum += second->data;
                second = second->next;
            }
            
            sum += carry;
            carry = sum/10;
            Node* node= new Node(sum%10);
            temp->next = node;
            temp = temp->next;
        }
        return reverse(dummy->next);
    }
};
