1. N meetings in one room

       int maxMeetings(int start[], int end[], int n)
    {
        // Your code here
        vector<vector<int>> meet;
        for(int i=0; i<n;i++){
            meet.push_back({end[i], start[i]});
        }
        sort(meet.begin(), meet.end());
        
        int cnt=0, free=0;
        for(int i=0;i<n;i++){
            if(meet[i][1] > free){
                cnt++;
                free = meet[i][0];
            }
        }
        return cnt;
    }

2.minimum platforms

    int findPlatform(int arr[], int dep[], int n)
    {
    	// Your code here
    	sort(arr, arr+n);
    	sort(dep, dep+n);
    	int i=1, j=0;
    	int result=1, plat_need= 1;
    	while(i<n && j<n){
    	    if(arr[i] <= dep[j]){
    	        plat_need++;
    	        i++;
    	    }
    	    else if(arr[i] > dep[j]){
    	        plat_need--;
    	        j++;
    	    }
    	    result = max(result, plat_need);
    	}
    	return result;
    }
    
    3. job sequencing
    
    public:
    //Function to find the maximum profit and the number of jobs done.
    static bool comparator(Job a,Job b){
        return (a.profit>b.profit);
    }
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        // your code here
        vector<int>ans;
        sort(arr,arr+n,comparator);
        int maxi = arr[0].dead;
        for(int i=0;i<n;i++){
            maxi=max(maxi,arr[i].dead);
        }
        int slot[maxi+1];
        memset(slot,-1,sizeof(slot));
        
        int countjob=0,jobprofit=0;
        for(int i=0;i<n;i++){
            for(int j=arr[i].dead;j>0;j--){
                if(slot[j]==-1){
                    slot[j]=i;
                    jobprofit+=arr[i].profit;
                    countjob++;
                    break;
                }
            }
        }
        ans.push_back(countjob);
        ans.push_back(jobprofit);
        return ans;
    } 
