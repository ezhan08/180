1. Reverse words in a string


class Solution {
public:
    string reverseWords(string s) {
    string result;
    int i = 0;
    int n = s.length();

    while(i < n){
        while(i < n && s[i] == ' ') i++;
        if(i >= n) break;
        int j = i + 1;
        while(j < n && s[j] != ' ') j++;
        string sub = s.substr(i, j-i);
        if(result.length() == 0) result = sub;
        else result = sub + " " + result;
        i = j+1;
    }
    return result;
        
    }
};

2. Longest palindrome in string

class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.size();
        int start = 0, maxlen =0;
        int left = 0, right = 0;
        if(n < 2) return s;
        for(int i = 0; i<n-1;){
            right = i, left = i;
            while(right < n && s[right] == s[right+1]) ++right;
            i = right + 1;
            while(left >=0 && right <n && s[left] == s[right]) --left, ++right;
            if(maxlen < right - left -1) maxlen = right - left -1, start = left + 1;
        }
        return s.substr(start, maxlen);
    }
};

3. roman to integer

class Solution {
public:
    int romanToInt(string s) {
        unordered_map <char,int> mp = {{'I', 1},{'M', 1000}, {'D', 500}, {'C', 100}, {'L', 50}, {'X', 10}, {'V', 5} };
        
        int res = mp[s.back()];
        for(int i =0; i< s.size() -1; i++){
            if(mp[s[i]] < mp[s[i+1]]) res -= mp[s[i]];
            else res += mp[s[i]];
        }
       return res; 
       
    }
};

4. atoi

5.strstr

6. longest common prefix

        //The approach heavily depends on the idea of sorting. If we sort a array of strings, the strings get sorted lexographically, which means the strings are sorted according to their character occurrence, so, the first string should be present in all the strings of the sorted array and since the last string in array is very different from every other string and hence it was placed last, so if we find the occurrence of our first string in the last string , we will get the common prefix. that's the idea


class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        sort(strs.begin(), strs.end());
        int n = strs.size();
        string a = strs[0];
        string b = strs[n-1];
        string res = "";
        for(int i =0; i< a.size(); i++){
            if(a[i] == b[i]){
                res += a[i];
            }else break;
        }
        return res;
    }
};



