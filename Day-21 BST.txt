1. floor in a bst

int floorInBST(TreeNode<int> * root, int X)
{
    // Write your code here.
    int floor = -1;
    while(root){
        if(root->val == X){
            floor= root->val;
            return floor;
        }
        if(X> root->val){
            floor = root->val;
            root = root->right;
        }else{
            root = root->left;
        }
    }
    return floor;
}

2. ceil in bst

int findCeil(BinaryTreeNode<int> *node, int x){
    // Write your code here.
    int ceil = -1;
    while(node){
        if(node->data == x){
            ceil = node->data;
            return ceil;
        }
        if(x> node->data){
            node = node->right;
        }else{
            ceil = node->data;
            node = node->left;
        }
    }
    return ceil;
}


3. kth smallest element in bst

(do dry run of code and youll understand the approach)

class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        stack<TreeNode*> st; 
        TreeNode* node = root;
        int cnt = 0; 
        while(true) {
            if(node != NULL) {
                st.push(node); 
                node = node->left; 
            }
            else {
    
                if(st.empty() == true) break; 
                node = st.top(); 
                st.pop(); 
                // inorder.push_back(node->val);
                cnt++; 
                if(cnt == k) return node->val; 
                node = node->right; 
            }  
        }
        return -1;
    }
};

4. kth largest element in bst

I think Kth largest element can be done in single traversal. By using reverse inorder traversal i.e.(Right-Node-Left) .Then we can easily figure out kth largest element in single traversal.

class Solution
{
    public:
    int kthLargest(Node *root, int K)
    {
        //Your code here
        stack<Node*> st;
        Node* node = root;
        int count =0;
        while(true){
            if(node){
                st.push(node);
                node = node->right;
            }else{
                if(st.empty())break;
                node = st.top();
                st.pop();
                count++;
                if(count == K){
                    return node->data;
                }
                node = node->left;
            }
        }
        return -1;
    }
};

5. find a pair with given sum in bst

(do 6th one first, then 5th)

class BSTIterator {
    stack<TreeNode *> myStack;
    bool reverse = true; 
public:
    BSTIterator(TreeNode *root, bool isReverse) {
        reverse = isReverse; 
        pushAll(root);
    }

   

    /** @return the next smallest number */
    int next() {
        TreeNode *tmpNode = myStack.top();
        myStack.pop();
        if(!reverse) pushAll(tmpNode->right);
        else pushAll(tmpNode->left);
        return tmpNode->val;
    }

private:
    void pushAll(TreeNode *node) {
        for(;node != NULL; ) {
             myStack.push(node);
             if(reverse == true) {
                 node = node->right; 
             } else {
                 node = node->left; 
             }
        }
    }
};
class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        if(!root) return false; 
        BSTIterator l(root, false); 
        BSTIterator r(root, true); 
        
        int i = l.next(); 
        int j = r.next(); 
        while(i<j) {
            if(i + j == k) return true; 
            else if(i + j < k) i = l.next(); 
            else j = r.next(); 
        }
        return false; 
    }
};




6. BST iterator

class BSTIterator {
    stack<TreeNode *> myStack;
public:
    BSTIterator(TreeNode *root) {
        pushAll(root);
    }

    /** @return whether we have a next smallest number */
    bool hasNext() {
        return !myStack.empty();
    }

    /** @return the next smallest number */
    int next() {
        TreeNode *tmpNode = myStack.top();
        myStack.pop();
        pushAll(tmpNode->right);
        return tmpNode->val;
    }

private:
    void pushAll(TreeNode *node) {
        for (; node != NULL; myStack.push(node), node = node->left);
    }
};
