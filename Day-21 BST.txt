1. floor in a bst

int floorInBST(TreeNode<int> * root, int X)
{
    // Write your code here.
    int floor = -1;
    while(root){
        if(root->val == X){
            floor= root->val;
            return floor;
        }
        if(X> root->val){
            floor = root->val;
            root = root->right;
        }else{
            root = root->left;
        }
    }
    return floor;
}

2. ceil in bst

int findCeil(BinaryTreeNode<int> *node, int x){
    // Write your code here.
    int ceil = -1;
    while(node){
        if(node->data == x){
            ceil = node->data;
            return ceil;
        }
        if(x> node->data){
            node = node->right;
        }else{
            ceil = node->data;
            node = node->left;
        }
    }
    return ceil;
}


3. kth smallest element in bst

(do dry run of code and youll understand the approach)

class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        stack<TreeNode*> st; 
        TreeNode* node = root;
        int cnt = 0; 
        while(true) {
            if(node != NULL) {
                st.push(node); 
                node = node->left; 
            }
            else {
    
                if(st.empty() == true) break; 
                node = st.top(); 
                st.pop(); 
                // inorder.push_back(node->val);
                cnt++; 
                if(cnt == k) return node->val; 
                node = node->right; 
            }  
        }
        return -1;
    }
};
