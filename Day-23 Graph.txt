1. clone graph

class Solution {
    void dfs(Node* curr,Node* node,vector<Node *>& visited)
    {
        //Node* copy = new Node(node->val);
        visited[node->val] = node;
        for(auto ele: curr->neighbors)
        {
            if(visited[ele->val] == NULL)
            {
                Node *newnode = new Node(ele->val);
                (node->neighbors).push_back(newnode);
                dfs(ele,newnode,visited);
            }
            else
                (node->neighbors).push_back(visited[ele->val]);
        }
    }
public:
    Node* cloneGraph(Node* node) {
        if(node==NULL)
            return NULL;
        
        vector<Node *> visited(1000,NULL);
        Node* copy = new Node(node->val);
        visited[node->val] = copy;
        //Iterate for all neighbors
        for(auto curr: node->neighbors)
        {
            if(visited[curr->val] == NULL)
            {
                Node *newnode = new Node(curr->val);
                (copy->neighbors).push_back(newnode);
                dfs(curr,newnode,visited);
            }
            else
                (copy->neighbors).push_back(visited[curr->val]);
        }
        return copy;
    }
};


2. DFS


class Solution {
void dfs(int node,vector<int>&ans,vector<int>&visited,vector<int>adj[])
    {
        ans.push_back(node);
        visited[node]=1;
        for(auto it:adj[node])
        {
            if(visited[it]==0)
            dfs(it,ans,visited,adj);
        }
    }
  public:
    // Function to return a list containing the DFS traversal of the graph.
    vector<int> dfsOfGraph(int V, vector<int> adj[]) {
        // Code here
        vector<int>visited(V,0);
        vector<int >ans;
            dfs(0,ans,visited,adj);
        return ans;
    }
};

3. BFS

class Solution {
  public:
    // Function to return Breadth First Traversal of given graph.
    vector<int> bfsOfGraph(int V, vector<int> adj[]) {
        // Code here
        vector<int> bfs;
        vector<int> vis(V, 0);
        queue<int> q;
        q.push(0);
        vis[0] = 1;
        while(!q.empty()){
            int node = q.front();
            q.pop();
            bfs.push_back(node);
            
            for(auto it: adj[node]){
                if(!vis[it]){
                    q.push(it);
                    vis[it] = 1;
                }
            }
        }
        
        
        return bfs;
    }
};

-----------------------------------------------------------------------------------------------------------------

For problems from 4 to 7, that is 4,5,6,7.... same problem on leetcode: i.e 'COURSE SCHEDULE'. Now code from 4 to 7 has gfg code. Update course schedule solution for each problem from 4 to 7 the next time you study graph.

4. Detect a cycle in a undirected graph using bfs

GFG

https://practice.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1

class Solution {

public:
    bool checkForCycle(int s, int V, vector<int> adj[], vector<int>& visited)
    {
        vector<int> parent(V, -1);
     
        // Create a queue for BFS
        queue<pair<int,int>> q;
     
        visited[s] = true;
        q.push({s, -1});
     
        while (!q.empty()) {
     
            int node = q.front().first;
            int par = q.front().second;
            q.pop();
     
            for (auto it : adj[node]) {
                if (!visited[it]) {
                    visited[it] = true;
                    q.push({it, node});
                }
                else if (par != it)
                    return true;
            }
        }
        return false;
    }
public:
	bool isCycle(int V, vector<int>adj[]){
	    vector<int> vis(V, 0); 
	    for(int i = 0;i<V;i++) {
	        if(!vis[i]) {
	            if(checkForCycle(i, V, adj, vis)) return true; 
	        }
	    }
	    
	    return false; 
	}
};


5. detect a cycle in undirected graph using dfs


GFG

https://practice.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1

 // o- based indexing code


class Solution {

public:
    bool checkForCycle(int node, int parent, vector<int> &vis, vector<int> adj[]) {
        vis[node] = 1; 
        for(auto it: adj[node]) {
            if(!vis[it]) {
                if(checkForCycle(it, node, vis, adj)) 
                    return true; 
            }
            else if(it!=parent) 
                return true; 
        }
        
        return false; 
    }
public:
	bool isCycle(int V, vector<int>adj[]){
	    vector<int> vis(V+1, 0); 
	    for(int i = 0;i<V;i++) {
	        if(!vis[i]) {
	            if(checkForCycle(i, -1, vis, adj)) return true; 
	        }
	    }
	    
	    return false; 
	}
};

6. detect cycle in directed graph using dfs

GFG

https://practice.geeksforgeeks.org/problems/detect-cycle-in-a-directed-graph/1

class Solution {
    
    bool checkd(int node, vector<int>&vis, vector<int>&dvis, vector<int>adj[]){
        vis[node]=1;
        dvis[node]=1;
        for(auto it: adj[node] ){
            if(!vis[it]){
                vis[it] = 1;
                if(checkd(it, vis, dvis, adj))return true;
            }else if(dvis[it]){
                return true;
            }
        }
        dvis[node]=0;
        return false;
    }
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        // code here
        vector<int> vis(V,0);
        vector<int> dvis(V,0);
        for(int i=0;i<V;i++){
            if(!vis[i]){
                if(checkd(i,vis,dvis,adj))return true;
            }
        }return false;
    }
};

(do 8th one first, to know about topological sort and then do 7th)

7. detect cycle in directed graph using bfs


GFG

https://practice.geeksforgeeks.org/problems/detect-cycle-in-a-directed-graph/1


class Solution {
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        // code here
        	    vector<int> indeg(V, 0);
	    queue<int> q;
	    for(int i=0;i<V;i++){
	        for(auto it: adj[i]){
	            indeg[it]++;
	        }
	    }
	    
	    for(int i=0;i<V;i++){
	        if(indeg[i] == 0){
	            q.push(i);
	        }
	    }
	    
	    int count =0;
	    while(!q.empty()){
	        int node = q.front();
	        q.pop();
	        count++;
	        for(auto it: adj[node]){
	            indeg[it]--;
	            if(indeg[it] == 0){
	                q.push(it);
	            }
	        }
	    }
	    if(count == V)return false;
	    return true;
    }
};



---------------------------------------------------------------------------------------------------------
8. topological sort bfs (kahn's algo)

GFG

https://practice.geeksforgeeks.org/problems/topological-sort/1#


class Solution
{
	public:
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    vector<int> indeg(V, 0);
	    queue<int> q;
	    for(int i=0;i<V;i++){
	        for(auto it: adj[i]){
	            indeg[it]++;
	        }
	    }
	    
	    for(int i=0;i<V;i++){
	        if(indeg[i] == 0){
	            q.push(i);
	        }
	    }
	    
	    vector<int> topo;
	    while(!q.empty()){
	        int node = q.front();
	        q.pop();
	        topo.push_back(node);
	        for(auto it: adj[node]){
	            indeg[it]--;
	            if(indeg[it] == 0){
	                q.push(it);
	            }
	        }
	    }
	    return topo;
	}
};



9. topological sort dfs

GFG

https://practice.geeksforgeeks.org/problems/topological-sort/1#

class Solution
{
    void dfs(int node, vector<int>& vis, stack<int> &st, vector<int> adj[]){
        vis[node] = 1;
        for(auto it: adj[node]){
            if(!vis[it]){
                dfs(it, vis, st, adj);
            }
        }
        st.push(node);
    }
	public:
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    stack<int> st;
	    vector<int> vis(V,0);
	    for(int i=0;i<V;i++){
	        if(!vis[i]){
	            dfs(i, vis ,st, adj);
	        }
	    }
	    
	    vector<int> topo;
	    while(!st.empty()){
	        topo.push_back(st.top());
	        st.pop();
	    }
	    return topo;
	}
};

9.Main course schedule problem on leetcode as in striver sheet;
-have solved using kahns algo(topological sort-bfs)

    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        
        vector<int> indegree(numCourses, 0);
        vector<vector<int>> adj(numCourses); //this is basically creating that dependency of if 'a' course is taken then 'b'  should already be taken.
        
        for(auto i: prerequisites) {
            adj[i[1]].push_back(i[0]);
            indegree[i[0]]++;
        }
        
        queue<int> q;
        //vector<int> res;
        
        for (int i=0; i< indegree.size(); i++) {
            if (indegree[i] == 0)
                q.push(i);
        }
        
        while (!q.empty()) {
            int v = q.front();
            q.pop();
            //res.push_back(v);
            for (auto i: adj[v]) {
                indegree[i]--;
                if (indegree[i] == 0)
                    q.push(i);
            }
        }
        
        for (int i=0; i< indegree.size(); i++) {
            if (indegree[i] > 0) 
                return false;
        }
        return true;
    }


10. number of islands

class Solution {
    void check(vector<vector<char>>&g, int i, int j, int rows, int cols ){
        if(i<0||i>=rows|| j<0 || j>=cols || g[i][j] != '1') return;
        
        g[i][j] = '2';
        
        int r[] = {1,-1, 0,0};
        int c[] = {0,0,1,-1};
        
        for(int k=0;k<4;k++){
            check(g, i + r[k], j+c[k], rows, cols);
        }
    }
public:
    int numIslands(vector<vector<char>>& grid) {
        int rows= grid.size();
        if(rows == 0) return 0;
        int cols = grid[0].size();
        
        int num = 0;
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(grid[i][j] == '1'){
                    check(grid, i, j, rows, cols);
                    num += 1;
                }
            }
        }
        return num;
    }
};

11. bipartite check using bfs

GFG


https://practice.geeksforgeeks.org/problems/bipartite-graph/1#

class Solution {
    
    bool check(int src, vector<int>adj[], int color[]){
        queue<int> q;
        q.push(src);
        color[src] = 1;
        while(!q.empty()){
            int node = q.front();
            q.pop();
            for(auto it: adj[node]){
                if(color[it] == -1){
                    color[it] = 1- color[node];
                    q.push(it);
                }else if(color[it] == color[node]){
                    return false;
                }
            }
        }
        return true;
    }
public:
	bool isBipartite(int V, vector<int>adj[]){
	    // Code here
	    int color[V];
	    memset(color, -1, sizeof color);
	    for(int i=0;i<V;i++){
	        if(color[i]==-1){
	            if(!check(i, adj, color)){
	                return false;
	            }
	        }
	    }
	    return true;
	}

};

Leetcode

  bool isBipartite(vector<vector<int>>& graph) {
    int n = graph.size();
    vector<int> color(n); // 0: uncolored; 1: color A; -1: color B
        
    queue<int> q; // queue, resusable for BFS    
	
    for (int i = 0; i < n; i++) {
      if (color[i]) continue; // skip already colored nodes
      
      // BFS with seed node i to color neighbors with opposite color
      color[i] = 1; // color seed i to be A (doesn't matter A or B) 
      for (q.push(i); !q.empty(); q.pop()) {
        int cur = q.front();
        for (int neighbor : graph[cur]) 
		{
          if (!color[neighbor]) // if uncolored, color with opposite color
          { color[neighbor] = -color[cur]; q.push(neighbor); } 
		  
          else if (color[neighbor] == color[cur]) 
            return false; // if already colored with same color, can't be bipartite!
        }        
      }
    }
    
    return true;
  }
  
  
  12. bipartite check using dfs

GFG


https://practice.geeksforgeeks.org/problems/bipartite-graph/1#


class Solution {
    bool checkdfs(int src, int color[], vector<int> adj[] ){
        for(auto it: adj[src]){
            if(color[it] == -1){
                color[it] = 1 - color[src];
                if(!checkdfs(it, color, adj)) return false;
            }
            else if(color[it] == color[src]) return false;
        }
        return true;
    }
public:
	bool isBipartite(int V, vector<int>adj[]){
	    // Code here
	    int color[V];
	    memset(color, -1, sizeof color);
	    for(int i=0;i<V;i++){
	        if(color[i]==-1){
	            if(!checkdfs(i, color, adj))return false;
	        }
	    }
	    return true;
	}

};





