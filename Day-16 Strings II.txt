1. Z function

class Solution {
public:
    int strStr(string haystack, string needle) {
        if(needle.size()==0) return 0;
        string s=needle+"+"+haystack;
        int n=s.size();
        vector<int> z(n);
        for(int i=1;i<n;i++){
            int j=z[i-1];
            while(j>0 and s[j]!=s[i]) j=z[j-1];
            if(s[i]==s[j]) j++;
            z[i]=j;
        }
        for(int i=needle.size()+1;i<n;i++){
            if(z[i]==needle.size()) return i-needle.size()-needle.size();
        }
        return -1;
    }
};

2. kmp algo/lps

class Solution {
  private:
    vector < int > kmpProcess(string needle) {
      int n = needle.size();
      vector < int > lps(n, 0);
      int len = 0;
      lps[0] = 0;
      int i = 1;
      while (i < n) {
        if (needle[i] == needle[len]) {
          len++;
          lps[i] = len;
          i++;
        } else {
          if (len == 0) {
            lps[i] = 0;
            i++;
          } else {
            len = lps[len - 1];
          }
        }

      }
      return lps;
    }

  public:
    int strStr(string haystack, string needle) {
      int m = haystack.size(), n = needle.size();
      if (!n) {
        return 0;
      }
      vector < int > lps = kmpProcess(needle);
      for (int i = 0, j = 0; i < m;) {
        if (haystack[i] == needle[j]) {
          i++, j++;
        }
        if (j == n) {
          return i - j;
        }
        if (i < m && haystack[i] != needle[j]) {
          j ? j = lps[j - 1] : i++;
        }
      }
      return -1;
    }
};

3. minimum no of chars at the beginning to make palindrome


 // we will match with lps array, in reverse we would check max length suffix which is a prefix in original string
      // if input is AACECAAAA make it of the form as given : Original + $ + reverse
    // AACECAAAA$AAAACECAA
    // 0100012220122234567  -> lps array
    // the last index of this lps array tells how much length of the original string from starting is a palindrome, we only need to add the remaining letters in the start to make a palondrome
    
    

int Solution::solve(string s) {
   
    string r = s;
    reverse(r.begin(),r.end());
    int orgL=s.length();
    s = s + "$" + r;
    int l = s.length();
    int lps[l]; // lps array
    int len=0,i=1;
    lps[0]=0;
    while(i<l){
        if(s[len]==s[i]){
            len++;
            lps[i]=len;
            i++;
        }
        else {
          if (len == 0) {
            lps[i] = 0;
            i++;
          } else {
            len = lps[len - 1];
          }
        }
    }
    int suff = lps[l-1]; // last index 
    return orgL-suff; // original length - last index of lps array
}


4. check for anagrams

class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.size()!=t.size()) return false;
        unordered_map<char,int> umap;
        for(char i: s){
            umap[i]++;
        }
        for(char j: t){
            if(--umap[j]<0)return false;
        }
        return true;
    }
};

5. Count and say

https://www.youtube.com/watch?v=1YUqtoT9YoE&ab_channel=CodeLibrary-byYogesh%26Shailesh

string countAndSay(int n) {
    if (n == 0) return "";
    string res = "1";
    while (--n) {
        string cur = "";
        for (int i = 0; i < res.size(); i++) {
            int count = 1;
             while ((i + 1 < res.size()) && (res[i] == res[i + 1])){
                count++;    
                i++;
            }
            cur += to_string(count) + res[i];
        }
        res = cur;
    }
    return res;
}


6. compare version number

https://leetcode.com/problems/compare-version-numbers/discuss/1797603/C%2B%2Bor-Detailed-Explanation-w-DRY-RUN-or-Faster-than-100.00-orCommented-code

class Solution {
public:
    int compareVersion(string version1, string version2) {
        int i=0,j=0;
        int num1=0,num2=0;
        int n=version1.length();
        int m=version2.length();
        
        while(i<n || j<m){
            while(i<n && version1[i]!='.'){
                num1 = num1*10 + (version1[i] - '0');
                i++;
            }
            while(j<m && version2[j] != '.'){
                num2 = num2*10 + (version2[j] - '0');
                j++;
            }
            if(num1<num2)return -1;
            if(num2<num1)return 1;
            
            num1=0;
            num2=0;
            i++;
            j++;
            
            
        }
        
       
        return 0;
    }
};

