1. Implement stack using array
see gfg spc video first then striver

public:
    Stack() {
      top = -1;
      size = 1000;
      arr = new int[size];
    }
  void push(int x) {
    
    arr[++top] = x;
  }
  int pop() {
   if(top==-1) return -1;
    return arr[top--];
  }
  int Top() {
    return arr[top];
  }
  int Size() {
    return top + 1;
  }

2. Implement queue using array
see gfg spc video first then striver

public:
    Queue() {
      arr = new int[16];
      start = -1;
      end = -1;
      currSize = 0;
    }

  Queue(int maxSize) {
    ( * this).maxSize = maxSize;
    arr = new int[maxSize];
    start = -1;
    end = -1;
    currSize = 0;
  }
  void push(int newElement) {
    if (currSize == maxSize) {
      cout << "Queue is full\nExiting..." << endl;
      exit(1);
    }
    if (end == -1) {
      start = 0;
      end = 0;
    } else
      end = (end + 1) % maxSize;
    arr[end] = newElement;
    cout << "The element pushed is " << newElement << endl;
    currSize++;
  }
  int pop() {
    if (start == -1) {
      cout << "Queue Empty\nExiting..." << endl;
    }
    int popped = arr[start];
    if (currSize == 1) {
      start = -1;
      end = -1;
    } else
      start = (start + 1) % maxSize;
    currSize--;
    return popped;
  }
  int top() {
    if (start == -1) {
      cout << "Queue is Empty" << endl;
      exit(1);
    }
    return arr[start];
  }
  int size() {
    return currSize;
  }

3. Implement stack using queue (single queue)

    queue<int> q;
    
    void push(int x) {
        q.push(x);
        for(int i=0;i<q.size()-1;i++){
            q.push(q.front());
            q.pop();
        }
        
    }
    
    int pop() {
        int x= q.front();
        q.pop();
        return x;       
    }
    
    int top() {
        return q.front();
        
    }
    
    bool empty() {
        return q.empty();
    }

4. Implement Queue using stack

class MyQueue {
public:
    stack<int> input, output;
    
    void push(int x) {
        input.push(x);
        
    }
    
    int pop() {
        if(output.empty()){
            while(input.size()){
                output.push(input.top()), input.pop();
            }
        }
        int x = output.top();
        output.pop();
        return x;
    }
    
    int peek() {
        if(output.empty()){
            while(input.size()){
                output.push(input.top()), input.pop();
            }
        }
        return output.top();
        
    }
    
    bool empty() {
        return input.empty() && output.empty();
        
    }
};

5. check for balanced  parenthesis

class Solution {
public:
    bool isValid(string s) {
        stack<char> st;
        for(auto it: s){
            if( it == '(' || it == '{' || it == '[') st.push(it);
            else {
                if(st.size()== 0) return false;
                char c = st.top();
                st.pop();
                if(c=='(' && it ==')' || c=='{' && it == '}' || c=='[' && it == ']') continue;
                return false;
            }            
        }
        return st.empty();
        
    }
};

6. next greater element

class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        stack<int> s;
        unordered_map<int, int> m;
        for (int n : nums2) {
            while (s.size() && s.top() < n) {
                m[s.top()] = n;
                s.pop();
            }
            s.push(n);
        }
        vector<int> ans;
        for (int n : nums1) ans.push_back(m.count(n) ? m[n] : -1);
        return ans;
        
    }
};

7. sort a stack 

void insert(stack<int> &st, int temp){
    if(st.empty() || temp >= st.top()){
        st.push(temp);
        return;
    }
    
    int val = st.top();
    st.pop();
    insert(st, temp);
    
    st.push(val);
    return;
}

void sortStack(stack<int> &st)
{
    // Base case - 1 element is always sorted
	if(st.size() == 1) return;
    
    // Store the top element and than pop it and call sortStack() again
    int temp = st.top();
    st.pop();
    sortStack(st);
    
    // Insert the popped element back into stack
    insert(st, temp);
    return;
}




