
1. max product subarray

https://www.youtube.com/watch?v=lXVy6YWFcRM

python

class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        res = max(nums)
        maxp, minp = 1,1
        
        for n in nums:
            if n==0:
                maxp, minp = 1, 1
                continue
            tmp = n * maxp    
            maxp = max(n , n*maxp, n*minp)
            minp = min(n , tmp, n*minp)
            res = max(res, maxp)
        return res
        
2. longest increadsing subsequence

https://leetcode.com/problems/longest-increasing-subsequence/discuss/1326308/C%2B%2BPython-DP-Binary-Search-BIT-Solutions-Picture-explain-O(NlogN)

above link... see solution 2

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        vector<int> sub;
        for (int x: nums){
            if(sub.empty() || sub[sub.size() - 1] < x){
                sub.push_back(x);
            }
            else{
                auto it = lower_bound(sub.begin(), sub.end(), x);
                *it = x;
            }
        }
        return sub.size();
    }
};

3. Longest common subsequence


NOTE:
tabulation = bottom up
memoization = top down

the below code is bottom up approach

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) 
    {
         int n = text1.size();
         int m = text2.size(); 
         int dp[n+1][m+1];
        
         for(int i = 0; i<=n; i++)
         {
             for(int j = 0; j<=m; j++)
             {
                    dp[i][j] = 0;
             }
         }
        
        for(int i = 1; i<=n; i++)
        {
            for(int j = 1; j<=m; j++)
            {
                if(text1[i-1] == text2[j-1])
                    dp[i][j] = 1 + dp[i-1][j-1];
                
                else
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);   
            }
        }
         
        return dp[n][m];
    }
};

4. 0/1 knapsack

Read this first:

https://leetcode.com/problems/ones-and-zeroes/discuss/814077/Dedicated-to-Beginners

the below approach is bottom up

class Solution {
public:
    int findMaxForm(vector<string>& strs, int m, int n) {
                int i,j,k,l;
        vector<vector<int>> dp(m+1 , vector<int>(n+1)); // this is initialisation of 3d vector
        
        for(auto &s:strs)
        {
            int x = count(s.begin(),s.end(),'1');
            int y = s.size()-x;
            
            for(i=m;i>=y;i--)
            {
                for(j=n;j>=x;j--)
                {
                    dp[i][j] = max(dp[i][j],1+dp[i-y][j-x]);
                }
            }
        }
        return dp[m][n];
    }
};

5. Edit distance 

video no. 25 in aditya verma playlist

https://leetcode.com/problems/edit-distance/discuss/501094/c%2B%2B-recursive-memoization-and-tabulation-Method

class Solution {
public:
    int minDistance(string word1, string word2) {
        int n1 = word1.size();
        int n2 = word2.size();
        int dp[n1+1][n2+1];
        
        for(int i=0;i<n1+1;i++)
        {
             dp[i][0] = i;
        }
        
        for(int i=0;i<n2+1;i++)
        {
             dp[0][i] = i;
        }
        
        for(int i=1;i<n1+1;i++)
        {
            for(int j=1;j<n2+1;j++)
            {
                if(word1[i-1] == word2[j-1])
                {
                    dp[i][j] = dp[i-1][j-1];
                } else {
                  dp[i][j] = 1+min(dp[i-1][j],min(dp[i][j-1], dp[i-1][j-1]));
                }
            }
        }
        return dp[n1][n2];
    }
};
