
1. max product subarray

https://www.youtube.com/watch?v=lXVy6YWFcRM

python

class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        res = max(nums)
        maxp, minp = 1,1
        
        for n in nums:
            if n==0:
                maxp, minp = 1, 1
                continue
            tmp = n * maxp    
            maxp = max(n , n*maxp, n*minp)
            minp = min(n , tmp, n*minp)
            res = max(res, maxp)
        return res
        
2. longest increadsing subsequence

https://www.youtube.com/watch?v=mouCn3CFpgg&ab_channel=TECHDOSE

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n= nums.size();
        vector<int> lis(n,1);
        
        for(int i=1;i<n;i++){
            for(int j=0;j<i;j++){
                if(nums[i] > nums[j] && lis[i] < lis[j] + 1){
                    lis[i]++;
                }
            }
        }
        return *max_element(lis.begin(), lis.end());
    }
};

3. Longest common subsequence


NOTE:
tabulation = bottom up
memoization = top down

the below code is bottom up approach

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) 
    {
         int n = text1.size();
         int m = text2.size(); 
         int dp[n+1][m+1];
        
         for(int i = 0; i<=n; i++)
         {
             for(int j = 0; j<=m; j++)
             {
                    dp[i][j] = 0;
             }
         }
        
        for(int i = 1; i<=n; i++)
        {
            for(int j = 1; j<=m; j++)
            {
                if(text1[i-1] == text2[j-1])
                    dp[i][j] = 1 + dp[i-1][j-1];
                
                else
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);   
            }
        }
         
        return dp[n][m];
    }
};

4. 0/1 knapsack

Read this first:

https://leetcode.com/problems/ones-and-zeroes/discuss/814077/Dedicated-to-Beginners

the below approach is bottom up

class Solution {
public:
    int findMaxForm(vector<string>& strs, int m, int n) {
                int i,j,k,l;
        vector<vector<int>> dp(m+1 , vector<int>(n+1)); // this is initialisation of 3d vector
        
        for(auto &s:strs)
        {
            int x = count(s.begin(),s.end(),'1');
            int y = s.size()-x;
            
            for(i=m;i>=y;i--)
            {
                for(j=n;j>=x;j--)
                {
                    dp[i][j] = max(dp[i][j],1+dp[i-y][j-x]);
                }
            }
        }
        return dp[m][n];
    }
};

5. Edit distance 

video no. 25 in aditya verma playlist

https://leetcode.com/problems/edit-distance/discuss/501094/c%2B%2B-recursive-memoization-and-tabulation-Method

class Solution {
public:
    int minDistance(string word1, string word2) {
        int n1 = word1.size();
        int n2 = word2.size();
        int dp[n1+1][n2+1];
        
        for(int i=0;i<n1+1;i++)
        {
             dp[i][0] = i;
        }
        
        for(int i=0;i<n2+1;i++)
        {
             dp[0][i] = i;
        }
        
        for(int i=1;i<n1+1;i++)
        {
            for(int j=1;j<n2+1;j++)
            {
                if(word1[i-1] == word2[j-1])
                {
                    dp[i][j] = dp[i-1][j-1];
                } else {
                  dp[i][j] = 1+min(dp[i-1][j],min(dp[i][j-1], dp[i-1][j-1]));
                }
            }
        }
        return dp[n1][n2];
    }
};

6. maximum sum increasing subsequence

https://www.youtube.com/watch?v=R7DrJsTkK8w&t=405s&ab_channel=TECHDOSE

class Solution{
		

	public:
	int maxSumIS(int arr[], int n)  
	{  
	    // Your code goes here
	    int i,j, maxi=0;
	    int msis[n];
	    for(int i=0;i<n;i++){
	        msis[i] = arr[i];
	    }
	    
	    for(i=1;i<n;i++){
	        for(j=0;j<i;j++){
	            if(arr[i]>arr[j] && msis[i] < msis[j] + arr[i]){
	                msis[i] = msis[j] + arr[i];
	            }
	        }
	    }
	    for(i=0;i<n;i++){
	        maxi = max(maxi, msis[i]);
	    }
	    return maxi;
	}  
};

7. matrix chain multiplication

class Solution{
    public:
     int t[101][101];
    public:
    int solve(int arr[],int i,int j)
    {
        if(i>=j)
        return 0;
        if(t[i][j]!=-1)
        return t[i][j];
        int mn=INT_MAX;
        for(int k=i;k+1<=j;k++)
        {
            int temp=solve(arr,i,k)+solve(arr,k+1,j)+arr[i-1]*arr[k]*arr[j];
          
            if(mn>temp)
            mn=temp;
        }
        return t[i][j]=mn;
    }
public:
    int matrixMultiplication(int n, int arr[])
    {
        // code here
        memset(t,-1,sizeof(t));
        int i=1;
        int j=n-1;
        return solve(arr,i,j);
    }
};


