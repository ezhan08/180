1. set matrix zeroes

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int col0 = 1, rows = matrix.size(), cols = matrix[0].size();

    for (int i = 0; i < rows; i++) {
        if (matrix[i][0] == 0) col0 = 0;
        for (int j = 1; j < cols; j++)
            if (matrix[i][j] == 0)
                matrix[i][0] = matrix[0][j] = 0;
    }

    for (int i = rows - 1; i >= 0; i--) {
        for (int j = cols - 1; j >= 1; j--)
            if (matrix[i][0] == 0 || matrix[0][j] == 0)
                matrix[i][j] = 0;
        if (col0 == 0) matrix[i][0] = 0;
    }
    }
};

2. pascal triangle

class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> res(numRows);
        for(int i=0;i<numRows;i++){
            res[i].resize(i+1);
            res[i][0] = res[i][i] =1;
            
            for(int j=1;j<i;j++){
                res[i][j] = res[i-1][j-1] + res[i-1][j];
            }
            
        }
        
        
        return res;
    }
};

3. next permutation

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        if(nums.size()<= 1) return;
        int i= nums.size()-1,j;
        for(j= nums.size()-2; j>=0; j--){
            if(nums[j] < nums[j+1]) break;
        }
        if(j>=0){
            while(nums[i] <= nums[j]) i--;
            swap(nums[i], nums[j]);
        }
        reverse(nums.begin() + j + 1, nums.end());
    }
};

4. kadanes algo

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int sum =0, res = INT_MIN;
        for(int i=0;i<nums.size();i++){
            sum += nums[i];
            res = max(res, sum);
            if(sum < 0) sum =0;
            
        }
        return res;
    }
};

5. sort 0,1,2

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int low = 0, mid= 0;
        int n = nums.size();
        int high = n -1;
        //dutch flag algo
        while(mid<= high){
            if(nums[mid]==0){
                swap(nums[low++], nums[mid++]);
            }else if(nums[mid]== 1){
                mid++;
            }else if(nums[mid]==2){
                swap(nums[mid], nums[high--]);
            }
        }
    }
};


6. stock buy and sell

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int maxpro=0;
        int minprice = INT_MAX;
        for(int i=0; i<prices.size(); i++){
            minprice= min(minprice, prices[i]);
            maxpro = max(maxpro, prices[i] - minprice);
        }
        return maxpro;
    }
};
