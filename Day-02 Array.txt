1. rotate matrix

class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n = matrix.size();
        for(int i=0;i<n;i++){
            for(int j=0;j<i;j++){
                swap(matrix[i][j], matrix[j][i] );
            }
        }
        for(int i=0;i<n;i++){
            reverse(matrix[i].begin(), matrix[i].end());
        }
    }
};

2. Merge intervals

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>> ans;
        if(intervals.size() ==0) return ans;
        sort(intervals.begin(), intervals.end());
        ans.push_back(intervals[0]);
        int j=0;
        for(int i=1;i<intervals.size();i++){
            if(ans[j][1] >= intervals[i][0]){
                ans[j][1] = max(ans[j][1], intervals[i][1]);
            }
            else{
                j++;
                ans.push_back(intervals[i]);
            }
        }
        
        
        return ans;
    }
};

3. Merge 2 sorted arrays without using extra space

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i = m-1; int j=n-1; int ind= m+n-1;
        
        while(j>=0){
            if(i>=0 && nums1[i] > nums2[j]){
                nums1[ind] = nums1[i];
                i--;
                ind--;
            }
            else{
                nums1[ind] = nums2[j];
                j--;
                ind--;
            }
        }
    }
};

//see gfg netlify 450 dsa for even efficient

4. find duplicate in an array of N+1 Integers Solution

    int findDuplicate(vector<int>& nums) {
        int slow = nums[0],fast = nums[0];
//         In this loop we will find the collision point
        do{
            slow = nums[slow];
            fast = nums[nums[fast]];
                    }
        while(slow != fast);
        
//         fast will be intizialized to the starting point 
        fast = nums[0];
        
        while(slow != fast){
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow ;
 
    }

5. Repeat and missing number

vector<int> Solution::repeatedNumber(const vector<int> &A) {
    int a, b;
    vector<bool> temp(A.size(), false);
    for(int i=0;i<A.size();i++){
        if(temp[A[i]]) a = A[i];
        temp[A[i]] = true;
    }

    for(int i=1; i<=A.size();i++){
        if(temp[i]==false) b = i;
    }

    vector<int> ans;
    ans.push_back(a); ans.push_back(b); 
    return ans;
}


6. Count Inversion 
        	typedef long long ll;
    ll ans = 0;
    long long int inversionCount(long long arr[], long long N)
    {
        ans = 0;
        mergeSort(arr, 0, N-1);
        return ans;
    }
    void mergeSort(ll arr[], ll lo, ll hi) {
        if(lo<hi) {
            ll mid = lo + (hi-lo)/2;
            mergeSort(arr, lo, mid);
            mergeSort(arr, mid+1, hi);
            merge(arr, lo, mid, hi);
        }
    }
    void merge(ll arr[], ll lo, ll mid, ll hi) {
        ll n1 = mid-lo+1, n2 = hi-mid;
        ll arr1[n1], arr2[n2];
        for(ll i=0; i<n1; i++) arr1[i] = arr[lo+i];
        for(ll i=0; i<n2; i++) arr2[i] = arr[mid+i+1];
        ll i=0, j=0, k=lo;
        while(i<n1 && j<n2) {
            if(arr1[i]<=arr2[j]) arr[k++] = arr1[i++];
            else {
                // Only this line added in merge sort code
                ans += n1 - i; 
                arr[k++] = arr2[j++];
            }
        }
        while(i<n1) arr[k++] = arr1[i++];
        while(j<n2) arr[k++] = arr2[j++];
    }

