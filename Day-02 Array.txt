1. rotate matrix

class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n = matrix.size();
        for(int i=0;i<n;i++){
            for(int j=0;j<i;j++){
                swap(matrix[i][j], matrix[j][i] );
            }
        }
        for(int i=0;i<n;i++){
            reverse(matrix[i].begin(), matrix[i].end());
        }
    }
};

2. Merge intervals

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>> ans;
        if(intervals.size() ==0) return ans;
        sort(intervals.begin(), intervals.end());
        ans.push_back(intervals[0]);
        int j=0;
        for(int i=1;i<intervals.size();i++){
            if(ans[j][1] >= intervals[i][0]){
                ans[j][1] = max(ans[j][1], intervals[i][1]);
            }
            else{
                j++;
                ans.push_back(intervals[i]);
            }
        }
        
        
        return ans;
    }
};

3. Merge 2 sorted arrays without using extra space

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i = m-1; int j=n-1; int ind= m+n-1;
        
        while(j>=0){
            if(i>=0 && nums1[i] > nums2[j]){
                nums1[ind] = nums1[i];
                i--;
                ind--;
            }
            else{
                nums1[ind] = nums2[j];
                j--;
                ind--;
            }
        }
    }
};

//see gfg netlify 450 dsa for even efficient

4. find duplicate in an array of N+1 Integers Solution

    int findDuplicate(vector<int>& nums) {
        int slow = nums[0],fast = nums[0];
//         In this loop we will find the collision point
        do{
            slow = nums[slow];
            fast = nums[nums[fast]];
                    }
        while(slow != fast);
        
//         fast will be intizialized to the starting point 
        fast = nums[0];
        
        while(slow != fast){
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow ;
 
    }


