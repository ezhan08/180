1. Search in 2D Matrix

a) geeksforgeeks

https://practice.geeksforgeeks.org/problems/search-in-a-matrix-1587115621/1/#

class Solution
{
    public:
    //Function to search a given number in row-column sorted matrix.
    bool search(vector<vector<int> > matrix, int n, int m, int x) 
    {
        // code here 
        int i=0, j=m-1;
        while(i<n && j>=0){
            if(matrix[i][j] == x){
                return 1;
            }
            if(matrix[i][j] > x){
                j--;
            }else{
                i++;
            }
        }
        return 0;
    }
};

b) leetcode

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n= matrix.size(), m=matrix[0].size();
        int lo=0;
        int hi= (n*m) -1;
        
        
        while(lo<=hi){
            int mid= lo + (hi-lo)/2;
            if(matrix[mid/m][mid%m]== target){
                return true;
            }
            if(matrix[mid/m][mid%m] < target){
                lo = mid+1;
            }else{
                hi = mid - 1;
            }
        }
        return false;
    }
};


2. Pow(x,n)

class Solution {
public:
    double myPow(double x, int n) {
        double ans = 1.0;
        long long nn= n;
        if(nn<0) nn = -1 * nn;
        while(nn){
            if(nn%2){
                ans = ans * x;
                nn = nn - 1;
            }else{
                x = x*x;
                nn = nn/2;
            }
        }
        if(n<0) {
            ans = (double)1/(double)ans;
        } 
        return ans;
    }
};

3. majority element (>n/2 times)

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int count=0;
        int candidate=0;
        for(auto num: nums){
            if(count==0){
                candidate = num;
            }
            if(num == candidate){
                count++;
            }else{
                count--;
            }
            
        }
        return candidate;
    }
};

4. majority element (>n/3 times)

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int n= nums.size();
        int c1=0, c2=0, nums1=-1, nums2=-1;
        for(int i=0;i<n;i++){
            if(nums[i]==nums1){        
                c1++;
            }else if(nums[i] == nums2){         
                c2++;
            }else if(c1==0){
                nums1 = nums[i];
                c1++;
            }else if(c2==0){
                nums2 = nums[i];
                c2++;
            }else{
                c1--;
                c2--;
            }
        }
        
        vector<int> ans;
        c1=0, c2=0;
        for(int i=0;i<n;i++){
            if(nums[i] == nums1){
                c1++;
            }
            
            else if(nums[i] == nums2){
                c2++;
            }
        }
        if(c1>n/3){
            ans.push_back(nums1);
        }
        if(c2>n/3){
            ans.push_back(nums2);
        }
        return ans;
    }
};


