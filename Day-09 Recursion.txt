1. Subset sums

class Solution
{
    
public:
    void func(int ind, int sum, vector<int> &arr, int N, vector<int> &ss){
        if(ind == N){
            ss.push_back(sum);
            return;
        }
        //pick the element
        func( ind+1, sum + arr[ind], arr,  N, ss);
        
        //do not pick the element
        func( ind+1,  sum, arr,  N, ss);
    }
    
    
    
public:
    vector<int> subsetSums(vector<int> arr, int N)
    {
        // Write Your Code here
        vector<int> ss;
        func(0,0,arr, N, ss);
        sort(ss.begin(), ss.end());
        
        return ss;
    }
};

2. subset 2


class Solution {
    
private:
    void func(int ind, vector<int> &nums, vector<int> &ds, vector<vector<int>> &ans){
        ans.push_back(ds);
        for(int i=ind; i< nums.size();i++){
            if(i != ind && nums[i] == nums[i-1])continue;
            ds.push_back(nums[i]);
            func(i + 1, nums, ds, ans);
            ds.pop_back(); // remember... to put on a tshirt, you need to remove whatever youre already wearing, similarly we remove earlier added element and then repeat
        }
    }
    
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> ds;
        sort(nums.begin(), nums.end());
        func(0, nums, ds, ans);
        return ans;
    }
};

