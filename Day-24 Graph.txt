1. kosa raju algo

leetcode link solution do later.

simple kosa raju algo

#include <bits/stdc++.h>
using namespace std;
void dfs(int node, stack<int> &st, vector<int> &vis, vector<int> adj[]) {
    vis[node] = 1; 
    for(auto it: adj[node]) {
        if(!vis[it]) {
            dfs(it, st, vis, adj); 
        }
    }
    
    st.push(node); 
}
void revDfs(int node, vector<int> &vis, vector<int> transpose[]) {
    cout << node << " "; 
    vis[node] = 1; 
    for(auto it: transpose[node]) {
        if(!vis[it]) {
            revDfs(it, vis, transpose); 
        }
    }
}
int main() {
    int n, m;
    cin >> n >> m; 
	vector<int> adj[n]; 
	for(int i = 0;i<m;i++) {
	    int u, v;
	    cin >> u >> v; 
	    adj[u].push_back(v);
	}
	
	stack<int> st;
	vector<int> vis(n, 0); 
	for(int i = 0;i<n;i++) {
	    if(!vis[i]) {
	        dfs(i, st, vis, adj); 
	    }
	} 
	
	vector<int> transpose[n]; 
	
	for(int i = 0;i<n;i++) {
	    vis[i] = 0; 
	    for(auto it: adj[i]) {
	        transpose[it].push_back(i); 
	    }
	}
	
	
	
	while(!st.empty()) {
	    int node = st.top();
	    st.pop(); 
	    if(!vis[node]) {
	        cout << "SCC: "; 
	        revDfs(node, vis, transpose); 
	        cout << endl; 
	    }
	}
	
	
	return 0;
}


2. dijkstras algo

class Solution
{
	public:
	//Function to find the shortest distance of all the vertices
    //from the source vertex S.
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        // Code here
        queue<int> q;
        vector<int> dist(V, INT_MAX);
        
        dist[S] = 0;
        q.push(S);
        
        while(!q.empty()){
            int node = q.front();
            q.pop();
            for(vector<int> neighbor: adj[node]){
                int nextnode = neighbor[0];
                int nextdist = neighbor[1];
                if(dist[node] + nextdist < dist[nextnode]){
                    dist[nextnode] = dist[node] + nextdist;
                    q.push(nextnode);
                }
            }
        }
        return dist;
    }
};

3. Bellman ford algo

class Solution{
	public:
	/*  Function to implement Dijkstra
    *   adj: vector of vectors which represents the graph
    *   S: source vertex to start traversing graph with
    *   V: number of vertices
    */
    vector <int> bellman_ford(int V, vector<vector<int>> adj, int S) {
        // Code here
        vector<int> distance(V, 100000000), empty;
        distance[S] = 0;
        for(int i=1;i<=V-1;i++){
            for(auto it: adj){
                if(distance[it[0]] + it[2] < distance[it[1]]){
                    distance[it[1]] = distance[it[0]] + it[2];
                }
            }
        }
        
        for(auto it: adj){
            if(distance[it[0]] + it[2] < distance[it[1]]){
                return empty;
            }
        }
        return distance;
    }
};


4. floyd warshall algo

https://www.youtube.com/watch?v=oNI0rf2P9gE&ab_channel=AbdulBari

void shortest_distance(vector<vector<int>>&dp){
    int n = dp.size();
    for(int k=0;k<n;k++)
       for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                if(dp[i][k]!=-1 && dp[k][j]!=-1){
                    if(dp[i][j]==-1)
                        dp[i][j] = dp[i][k] + dp[k][j];
                    else
                        dp[i][j] = min(dp[i][j],dp[i][k]+dp[k][j]);
                }
                
}

5. mst using prims algo

class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        
        //Brute Force O((n^2))
        //optimal sol O(NlogN)
        
        // int par[V];
        int key[V];
        bool mst[V];
        
        for(int i=0;i<V;i++)
        {
            key[i]=INT_MAX,mst[i]=false;
        }
        
        key[0]=0;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        
        pq.push({key[0],0});  //key[],weight
        
        while(!pq.empty())
        {
            int u=pq.top().second;   //edge u-->v
            pq.pop();
            
            mst[u]=true;
            for(auto it:adj[u])
            {
                int v=it[0];
                int wt=it[1];
                
                if(mst[v]==false and wt<key[v])
                {
                    key[v]=wt;
                    pq.push({key[v],v});
                }
            }
        }
        
        int sum=0;
        for(int i=0;i<V;i++)
        {
            sum+=key[i];
        }
        return sum;
        
    }
};
