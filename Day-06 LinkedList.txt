1. Intersection point of ll

class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(!headA || !headB) return NULL;
        ListNode* a= headA;
        ListNode* b= headB;
        while(a!=b){
            a=a==NULL?a=headB:a->next;
            b=b==NULL?b=headA:b->next;
        }
        return a;
    }
};

2. cycle/loop in a ll

class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode* fast = head, *slow = head;
        while(fast!= NULL && fast->next != NULL){
            fast = fast->next->next;
            slow = slow->next;
            if ( fast == slow) return true;
        }
        return false;
    }
};

3. reverse a ll in groups of size k

(see gfg must do for slight variation of problem statement)


class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* cursor= head;
        for(int i=0;i<k;i++){
            if(!cursor) return head;
            cursor= cursor->next;
        }
        
        ListNode* curr=head, *prev=NULL, *next=NULL;
        for(int i=0;i<k;i++){
            next = curr->next;
            curr->next = prev;
            prev= curr;
            curr = next;
            
        }
        head->next= reverseKGroup(curr, k);
        return prev;
    }
};

4. check for palindrome

class Solution {
public:
    ListNode* reverse(ListNode* head){
        ListNode* curr = head, *prev = NULL, *next = NULL;
        while(curr!=NULL){
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
    bool isPalindrome(ListNode* head) {
        if(!head || !head->next) return true;
        
        ListNode* fast = head, *slow= head;
        while(fast->next !=NULL && fast->next->next !=NULL){
            fast = fast->next->next;
            slow = slow->next;
        }
        
        slow->next = reverse(slow->next);
        slow = slow->next;
        
        while(slow!=NULL){
            if(head->val != slow->val) return false;
            head = head->next;
            slow = slow->next;
        }
        return true;
    }
};

