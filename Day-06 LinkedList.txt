1. Intersection point of ll

class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(!headA || !headB) return NULL;
        ListNode* a= headA;
        ListNode* b= headB;
        while(a!=b){
            a=a==NULL?a=headB:a->next;
            b=b==NULL?b=headA:b->next;
        }
        return a;
    }
};

2. cycle/loop in a ll

class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode* fast = head, *slow = head;
        while(fast!= NULL && fast->next != NULL){
            fast = fast->next->next;
            slow = slow->next;
            if ( fast == slow) return true;
        }
        return false;
    }
};

3. reverse a ll in groups of size k

(see gfg must do for slight variation of problem statement)
GFG:
https://practice.geeksforgeeks.org/problems/reverse-a-linked-list-in-groups-of-given-size/1#


class Solution
{
    public:
    struct node *reverse (struct node *head, int k)
    { 
        // Complete this method
        if(!head || !head->next)return head;
        int count =0;
        node* curr = head, *prev= NULL, *next = NULL;
        while(curr && count <k){
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
            count++;
        }
        if(head){
            node* rest_head = reverse(curr, k);
            head->next = rest_head;
        }
    return prev;
    }
};


Leetcode:

class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(!head || k==1)return head;
        ListNode* dummy = new ListNode(0);
        dummy->next = head;
        
        ListNode* prev=dummy, *curr= dummy, *nex=dummy;
        int count=0;
        while(curr->next){
            curr = curr->next;
            count++;
        }
        while(count >=k){
            curr = prev->next;
            nex = curr->next;
            for(int i=1;i<k;i++){
                curr->next = nex->next;
                nex->next= prev->next;
                prev->next = nex;
                nex = curr->next;
            }
            prev = curr;
            count -= k;
        }
        return dummy->next;
    }
};

4. check for palindrome

class Solution {
public:
    ListNode* reverse(ListNode* head){
        ListNode* curr = head, *prev = NULL, *next = NULL;
        while(curr!=NULL){
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
    bool isPalindrome(ListNode* head) {
        if(!head || !head->next) return true;
        
        ListNode* fast = head, *slow= head;
        while(fast->next !=NULL && fast->next->next !=NULL){
            fast = fast->next->next;
            slow = slow->next;
        }
        
        slow->next = reverse(slow->next);
        slow = slow->next;
        
        while(slow!=NULL){
            if(head->val != slow->val) return false;
            head = head->next;
            slow = slow->next;
        }
        return true;
    }
};


5. starting point of loop of ll

class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode* fast =head, *slow= head, *entry=head;
        if(!head || !head->next)return NULL;
        while(fast && fast->next){
            fast = fast->next->next;
            slow= slow->next;
            if(fast==slow){
                while(entry!=slow){
                    entry= entry->next;
                    slow=slow->next;
                }
                return entry;
            }
        }
        return NULL;
    }
};

6. flattening a ll

Node* mergeTwoLists(Node* a, Node* b) {
    
    Node *temp = new Node(0);
    Node *res = temp; 
    
    while(a != NULL && b != NULL) {
        if(a->data < b->data) {
            temp->bottom = a; 
            temp = temp->bottom; 
            a = a->bottom; 
        }
        else {
            temp->bottom = b;
            temp = temp->bottom; 
            b = b->bottom; 
        }
    }
    
    if(a) temp->bottom = a; 
    else temp->bottom = b; 
    
    return res -> bottom; 
    
}
Node *flatten(Node *root)
{
   
        if (root == NULL || root->next == NULL) 
            return root; 
  
        // recur for list on right 
        root->next = flatten(root->next); 
  
        // now merge 
        root = mergeTwoLists(root, root->next); 
  
        // return the root 
        // it will be in turn merged with its left 
        return root; 
}
