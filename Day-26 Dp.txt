1. MInimum path sum

https://leetcode.com/problems/minimum-path-sum/discuss/584892/C%2B%2B-Crystal-Clear-DP

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int n= grid.size();
        int m = grid[0].size();
        vector<vector<int>> dp(n, vector<int>(m, 0));
        
        dp[0][0] = grid[0][0];
        for(int i=1;i<n;i++){
            dp[i][0] = dp[i-1][0] + grid[i][0];
        }
        for(int j=1;j<m;j++){
            dp[0][j] = dp[0][j-1] + grid[0][j];
        }
        for(int i=1;i<n;i++){
            for(int j=1; j<m;j++){
                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j];
            }
        }
        return dp[n-1][m-1];
    }
};

2. coin change

https://www.youtube.com/watch?v=ZI17bgz07EE&ab_channel=TECHDOSE

class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        int n = coins.size();
        int dp[n+1][amount+1];
        
        for(int i=0;i<=n;++i)
        {
            for(int j=0;j<=amount;++j)
            {
                if(j==0)
                    dp[i][j] = 0;
                else if(i==0)
                    dp[i][j] = 1e5;
                else if(coins[i-1]>j)
                    dp[i][j] = dp[i-1][j];
                else
                    dp[i][j] = min(1 + dp[i][j-coins[i-1]], dp[i-1][j]);
            }
        }
        return dp[n][amount]>1e4 ? -1:dp[n][amount];
    }
};

3. subset sum

https://www.youtube.com/watch?v=obhWqDfzwQQ&ab_channel=TECHDOSE

class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        int sum =0;
        for(int i=0;i<n;i++){
            sum += nums[i];
        }
        if(sum % 2 != 0){
            return false;
        }
        bool dp[n+1][sum/2+1];
        for(int i=0;i<=n;i++){
            for(int j=0;j<=sum/2;j++){
                
                if(i==0 || j==0){
                    dp[i][j] = false;
                }
                else if(nums[i-1] > j){
                    dp[i][j] = dp[i-1][j];
                }
                else if(nums[i-1] == j){
                    dp[i][j] = true;
                }
                else {
                    dp[i][j] = dp[i-1][j] || dp[i-1][j-nums[i-1]];
                }
            }
        }
        return dp[n][sum/2];
    }
};

4. rod cutting

https://www.youtube.com/watch?v=nxQsb2mVdHs&t=70s&ab_channel=RoshanSrivastava


class Solution {
public:
    
    vector <int> arr;
    int dp[109][109];
    
    int solve(int idx, int jdx, int l, int r) {
        if(idx < 0 || jdx >= arr.size() || idx > jdx)
            return 0;
        
        if(idx == jdx)
            return r - l;
        
        if(dp[idx][jdx] != -1)
            return dp[idx][jdx];
        
        int ans = INT_MAX;
        for(int i = idx; i <= jdx; i++) {
            ans = min(ans, (r - l) + solve(idx, i - 1, l, arr[i]) + solve(i + 1, jdx, arr[i], r));
        }
        return dp[idx][jdx] = ans;
        
    }
    
    
    
    int minCost(int n, vector<int>& cuts) {
        
        memset(dp, -1, sizeof dp);
        sort(cuts.begin(), cuts.end());
        this->arr = cuts;
        
        return solve(0, cuts.size() - 1, 0, n);
    }
};


5. egg dropping

https://www.youtube.com/watch?v=S49zeUjeUL0

https://www.youtube.com/watch?v=gr2NtY-2QUY&ab_channel=AdityaVerma

class Solution
{
    public:
    int dp[201][201];
    //Function to find minimum number of attempts needed in 
    //order to find the critical floor.
    
    int solve(int e, int f){
        if(f==0 || f==1)return f;
        if(e==1)return f;
        if(dp[e][f] != -1)return dp[e][f];
        int mn = INT_MAX;
        for(int k=1;k<=f;k++){
            int temp = 1 + max(solve(e-1, k-1), solve(e,f-k));
            mn = min(mn, temp);
        }
        return dp[e][f]  = mn;
    }
    
    int eggDrop(int e, int f) 
    {
        // your code here
        memset(dp, -1, sizeof dp);
        return solve(e,f);
        
    }
};
