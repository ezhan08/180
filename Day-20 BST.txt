1. Populate next right pointers

class Solution {
public:
    Node* connect(Node* root) {
        if(!root) return root;
        Node* prev = root;
        Node* curr = NULL;
        while(prev->left){
            curr = prev;
            while(curr){
                curr->left->next = curr->right;
                if(curr->next)curr->right->next = curr->next->left;
                curr= curr->next;
            }
            prev = prev->left;
        }
        return root;
    }
};

2. search in bst

class Solution {
public:
    TreeNode* searchBST(TreeNode* root, int val) {
         while(root != NULL && root->val != val){
            root = val<root->val? root->left:root->right;
        }
        return root;
    }
};

3. construct bst from given keys

class Solution {
public:
    TreeNode *sortedArrayToBST(vector<int> &num) {
        if(num.size() == 0) return NULL;
        if(num.size() == 1)
        {
            return new TreeNode(num[0]);
        }
        
        int middle = num.size()/2;
        TreeNode* root = new TreeNode(num[middle]);
        
        vector<int> leftInts(num.begin(), num.begin()+middle);
        vector<int> rightInts(num.begin()+middle+1, num.end());
        
        root->left = sortedArrayToBST(leftInts);
        root->right = sortedArrayToBST(rightInts);
        
        return root;
    }
};
