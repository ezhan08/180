1. Populate next right pointers

class Solution {
public:
    Node* connect(Node* root) {
        if(!root) return root;
        Node* prev = root;
        Node* curr = NULL;
        while(prev->left){
            curr = prev;
            while(curr){
                curr->left->next = curr->right;
                if(curr->next)curr->right->next = curr->next->left;
                curr= curr->next;
            }
            prev = prev->left;
        }
        return root;
    }
};

2. search in bst

class Solution {
public:
    TreeNode* searchBST(TreeNode* root, int val) {
         while(root != NULL && root->val != val){
            root = val<root->val? root->left:root->right;
        }
        return root;
    }
};

3. construct bst from given keys

class Solution {
public:
    TreeNode *sortedArrayToBST(vector<int> &num) {
        if(num.size() == 0) return NULL;
        if(num.size() == 1)
        {
            return new TreeNode(num[0]);
        }
        
        int middle = num.size()/2;
        TreeNode* root = new TreeNode(num[middle]);
        
        vector<int> leftInts(num.begin(), num.begin()+middle);
        vector<int> rightInts(num.begin()+middle+1, num.end());
        
        root->left = sortedArrayToBST(leftInts);
        root->right = sortedArrayToBST(rightInts);
        
        return root;
    }
};


4. construct bst from preorder traversal

class Solution {
public:
    
    TreeNode* build(vector<int> &preorder, int &i, int bound){
        if(preorder.size() ==i || preorder[i] > bound) return NULL;
        TreeNode* root= new TreeNode(preorder[i++]);
        root->left = build(preorder, i, root->val);
        root->right = build(preorder, i, bound );
        return root;
    }
    
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        int i=0; 
        
        return build(preorder, i, INT_MAX);
    }
};

5. check for bst

class Solution {
public:
    bool isval(TreeNode* root, long max, long min){
        if(!root) return true;
        if ( root->val >= max || root->val<=min ) return false;
        return isval(root->left, root->val, min) && isval(root->right, max, root->val);
    }
    
    
    bool isValidBST(TreeNode* root) {
        return isval(root, LONG_MAX, LONG_MIN);
    }
};

6. lca of 2 nodes

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(!root) return NULL;
        int curr = root->val; 
        if(curr < p->val && curr < q->val) {
            return lowestCommonAncestor(root->right, p, q);
        }
        if(curr > p->val && curr > q->val) {
            return lowestCommonAncestor(root->left, p, q);
        }
        return root;
    }
};

7. inorder predecessor / successor

void succ(Node* root, Node*&suc, int key){
    while(root){
        if(key>=root->key){
            root = root->right;
        }else{
            suc = root;
            root = root->left;
        }
    }
}

void pred(Node* root, Node*&pre, int key){
    while(root){
        if(key<=root->key){
            
            root = root->left;
        }else{
            pre = root;
            root = root->right;
        }
    }
}

void findPreSuc(Node* root, Node*& pre, Node*& suc, int key)
{

// Your code goes here
pred(root, pre, key);
succ(root, suc, key);



}
