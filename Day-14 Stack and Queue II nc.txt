1. next smaller element

vector<int> Solution::prevSmaller(vector<int> &A) {
    vector<int> ans;
    ans.resize(A.size());

    stack<int> st;
    
    for (int i = 0; i < A.size(); i++) {
        while (!st.empty() && st.top() >= A[i]) st.pop();
        if (st.empty()) {
            ans[i] = -1;
        } else {
            ans[i] = st.top();
        }
        st.push(A[i]);
    }
    return ans;
}

2. LRU CACHE

python

from collections import OrderedDict
class LRUCache:
    def __init__(self, Capacity):
        self.size = Capacity
        self.cache = OrderedDict()

    def get(self, key):
        if key not in self.cache: return -1
        val = self.cache[key]
        self.cache.move_to_end(key)
        return val

    def put(self, key, val):
        if key in self.cache: del self.cache[key]
        self.cache[key] = val
        if len(self.cache) > self.size:
            self.cache.popitem(last=False)
            
            
   3. LFU cache
   
   
   
   4. largest rectangle in histogram
   
   class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        stack<int> st; 
        int maxA = 0; 
        int n = heights.size(); 
        for(int i = 0;i<=n;i++) {
            while(!st.empty() && (i==n || heights[st.top()] >= heights[i])) {
                int height = heights[st.top()];
                st.pop(); 
                int width; 
                if(st.empty()) width = i; 
                else width = i - st.top() - 1; 
                
                // cout << i << " " << width << " " << height << endl; 
                maxA = max(maxA, width * height); 
            }
            st.push(i); 
        }
        return maxA;
    }
};


5. sliding window maximum

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int> dq;
        vector<int> ans;
        for (int i=0; i<nums.size(); i++) {
            if (!dq.empty() && dq.front() == i-k) dq.pop_front();
            
            while (!dq.empty() && nums[dq.back()] < nums[i])
                dq.pop_back();
            
            dq.push_back(i);
            if (i>=k-1) ans.push_back(nums[dq.front()]);
        }
        return ans;
    }
};

6. Implement min stack

class MinStack {
    typedef long long ll;
    stack<ll> st;
    ll mini;
    
public:
    MinStack() {
        if(!st.empty() )st.pop();
        mini = INT_MAX;
        
    }
    
    void push(int val) {
        ll value = val;
        if(st.empty()){
            mini = value;
            st.push(value);
        }else{
            if(value<mini){
            st.push(2*value*1LL - mini);
            mini = value;
        }else{
            st.push(value);
        }
        }
        
        
    }
    
    void pop() {
        if(st.empty()) return;
        ll el = st.top();
        st.pop();
        if(el < mini){
            mini =2* mini - el;
        }
        
    }
    
    int top() {
        if(st.empty())return -1;
        ll el = st.top();
        if(el < mini) return mini;
        return el;
        
    }
    
    int getMin() {
        return mini;
    }
};

7. rotten oranges

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        if(grid.size()==0) return 0;
        queue<pair<int,int>> rotten;
        int m=grid.size(), n = grid[0].size();
        int mins=0, tot=0, rot=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j] != 0) tot++;
                if(grid[i][j] == 2) rotten.push({i,j});
            }
        }
        int dx[4] = {0,0,1,-1};
        int dy[4] = {1,-1,0,0};
        
        while(!rotten.empty()){
            int k=rotten.size();
            rot += k;
            while(k--){
                int x = rotten.front().first, y= rotten.front().second;
                rotten.pop();
                for(int i=0;i<4;i++){
                    int nx = x+dx[i], ny= y+dy[i];
                    if(nx < 0 ||ny<0 || nx>=m || ny >= n || grid[nx][ny] != 1) continue;
                    grid[nx][ny] = 2;
                    rotten.push({nx, ny});
                }
                
                
            }
            if(!rotten.empty())mins++;
        }
        
        return rot==tot?mins:-1;
        
    }
};

8. online stock span

https://www.youtube.com/watch?v=lGWLBgwd-cw&ab_channel=TECHDOSE

class StockSpanner {
    stack<pair<int,int>> s; //1st is index and 2nd is value
    int index;
public:
    StockSpanner() {
        
        index = -1;
    }
    
    int next(int price) {
        index +=1;
        
        while(!s.empty() && s.top().second<=price)    //Find the previous greater element
            s.pop();
        //If there is no previous greater element
        if(s.empty())
        {   s.push({index,price});      return index+1;   }
        
        int result = s.top().first;
        s.push({index,price});
        return index-result;        
    }
};

9.


10. celebrity problem

find on lintcode which is alternative for leetcode premium

https://www.lintcode.com/problem/645/description



// Forward declaration of the knows API.
bool knows(int a, int b);

class Solution {
public:
    /**
     * @param n a party with n people
     * @return the celebrity's label or -1
     */
    int findCelebrity(int n) {
        // Write your code here
        int res=0;
        for(int i=1;i<n;i++){
            if(knows(res,i)){
                res = i;
            }
        }
        for(int i=0;i<n;i++){
            if(i != res && knows(res,i) || !knows(i,res)){
                return -1;
            }
        }


        return res;
    }
};
